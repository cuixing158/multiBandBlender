# This is a basic workflow to help you get started with MATLAB Actions

name: MATLAB Build

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "build"
 build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Sets up a display server
      - name: Start display server
        if: ${{ always() }}
        run: |
          sudo apt-get install xvfb
          Xvfb :99 &
          echo "DISPLAY=:99" >> $GITHUB_ENV
          
      # Sets up MATLAB on a GitHub-hosted runner
      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v2
        with:
          # release: ${{ matrix.MATLABVersion }}
          products: MATLAB 
            Image_Processing_Toolbox
            Computer_Vision_Toolbox
          # List required products above in the format shown (and uncomment them),名字参考：https://github.com/mathworks-ref-arch/matlab-dockerfile/tree/main/mpm-input-files
          # List of product strings:
          # Statistics_and_Machine_Learning_Toolbox
          # Simulink
          # Statistics_and_Machine_Learning_Toolbox
          # Simulink_Coder
          # Econometrics_Toolbox
          # Deep_Learning_Toolbox

      # Runs a set of commands using the runners shell
      #- name: Run all tests
      #  uses: matlab-actions/run-tests@v2
      #  with:
      #    source-folder: code

      # You can use "run-build" to invoke the MATLAB build tool and run build tasks
      #- name: Run the default "test" task in the build file
      #   uses: matlab-actions/run-build@v2

      # You can use "run-command" to execute custom MATLAB scripts, functions, or statements
      - name: Run custom testing procedure
        uses: matlab-actions/run-command@v2
        with:
          command: disp('Running my custom testing procedure!'); ExamplesEntry; 
